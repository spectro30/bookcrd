// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// cluster.bytebuilders.dev_clusters.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterBytebuildersDev_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4f\x8f\x1b\xb7\x0f\xbd\xfb\x53\x10\xf8\x1d\xf6\x12\x8f\xb1\xbf\x14\x45\x31\xb7\x85\x5b\x14\x8b\xfe\x5b\xec\x06\xb9\xcb\x12\x3d\xa3\xac\x86\x52\x48\xca\xad\x5b\xf4\xbb\x17\xd2\xcc\xd8\xb3\x76\x92\xee\x21\xd5\xc9\x22\xa9\x47\xce\xe3\x23\x6d\x92\x7f\x8f\x2c\x3e\x52\x0b\x26\x79\xfc\x43\x91\xca\x4d\x9a\xe7\xef\xa4\xf1\x71\x73\xb8\x5d\x3d\x7b\x72\x2d\x6c\xb3\x68\x1c\x1e\x51\x62\x66\x8b\xdf\xe3\xde\x93\x57\x1f\x69\x35\xa0\x1a\x67\xd4\xb4\x2b\x00\xcb\x68\x8a\xf1\x9d\x1f\x50\xd4\x0c\xa9\x05\xca\x21\xac\x00\x82\xd9\x61\x90\x12\x03\x60\x52\x6a\x9e\xf3\x0e\x99\x50\xb1\x66\x21\x33\x60\x0b\xbb\xa3\xe2\x2e\xfb\xe0\x90\x65\x05\x30\x1a\x6d\xc8\xa2\xc8\xd2\x4c\x3f\x9a\x65\x54\xe3\xf0\xb0\x92\x84\xb6\x00\x77\x1c\x73\x3a\x3d\xb8\x8e\x1b\x11\xa7\x1a\xac\x51\xec\x22\xfb\xf9\xbe\x86\x73\x45\x93\xc1\xa4\x24\x36\x3a\xac\xd7\x89\x84\x11\xbb\x5a\x82\x17\xfd\x69\x69\xfd\xd9\x8b\x56\x4f\x0a\x99\x4d\x38\x97\x5e\x8d\xe2\xa9\xcb\xc1\xf0\xc9\xbc\x02\x10\x1b\x13\xb6\xf0\x6b\x29\x2b\x19\x8b\x6e\x05\x70\x18\xdb\x51\xcb\x5a\x83\x71\xae\xb2\x6c\xc2\x03\x7b\x52\xe4\x6d\x0c\x79\xa0\x53\xd1\x1f\x24\xd2\x83\xd1\xbe\x85\x66\xee\x43\x73\xd5\x84\x1a\x3b\xf3\x79\xd7\xe1\x74\xd7\x63\x49\xee\x8c\x8e\x86\xd1\x7d\xb8\x35\x21\xf5\xe6\x76\xac\xd9\xf6\x38\x98\x76\x8a\x8f\x09\xe9\xee\xe1\xfe\xfd\xdb\xa7\x17\x66\x80\xc4\x31\x21\xeb\x89\xcb\xf1\x2c\xa4\xb5\xb0\x02\x38\x14\xcb\x3e\x69\xd5\xdc\x4d\x01\x1c\xa3\xc0\x15\x4d\xa1\x80\xf6\x38\xb3\x80\x6e\xaa\x01\xe2\x1e\xb4\xf7\x02\x8c\x89\x51\x90\xb4\x7e\xe2\x0b\x60\x28\x41\x86\x20\xee\x3e\xa0\xd5\x06\x9e\x90\x0b\x0c\x48\x1f\x73\x70\x60\x23\x1d\x90\x15\x18\x6d\xec\xc8\xff\x79\xc2\x16\xd0\x58\x93\x06\xa3\x38\xb5\xf0\x7c\x2a\xeb\x64\x02\x1c\x4c\xc8\xf8\x06\x0c\x39\x18\xcc\x11\x18\x4b\x16\xc8\xb4\xc0\xab\x21\xd2\xc0\x2f\x91\x11\x3c\xed\x63\x0b\xbd\x6a\x92\x76\xb3\xe9\xbc\xce\x23\x65\xe3\x30\x64\xf2\x7a\xdc\xd8\x48\xca\x7e\x97\x35\xb2\x6c\x1c\x1e\x30\x6c\xc4\x77\x6b\xc3\xb6\xf7\x8a\x56\x33\xe3\xc6\x24\xbf\xae\xa5\x93\xd6\xb9\x1c\xdc\xff\x78\x1a\x42\xb9\x79\x51\xeb\xd8\x4f\x51\xf6\xd4\x2d\x1c\x55\xb9\x5f\xe8\x40\xd1\x30\x78\x01\x33\x3d\x1d\xbf\xe2\x4c\x74\x31\x15\x76\x1e\x7f\x78\x7a\x07\x73\xea\xda\x8c\x4b\xf6\x2b\xef\xe7\x87\x72\x6e\x41\x21\xcc\xd3\x1e\x79\x6c\xe2\x9e\xe3\x50\x31\x91\x5c\x8a\x9e\xb4\x5e\x6c\xf0\x48\x97\xf4\x4b\xde\x0d\x5e\x4b\xdf\x3f\x66\x14\x2d\xbd\x6a\x60\x6b\x88\xa2\xc2\x0e\x21\xa7\xa2\x5f\xd7\xc0\x3d\xc1\xd6\x0c\x18\xb6\x46\xf0\x3f\x6f\x40\x61\x5a\xd6\x85\xd8\xd7\xb5\x60\xb9\x22\x2f\x83\x47\xd6\x16\x8e\x79\x9d\x9d\xcf\xa7\xe7\x6b\xec\x64\x0a\xf1\x38\x20\x69\xd9\x21\x97\xde\xcf\xd6\x53\x0e\x63\x0a\xde\x9a\x6d\xcc\xa4\xd7\x0f\xf7\x91\x07\xa3\x6d\x51\xff\xdb\xff\x7f\x06\xb6\x4c\x46\x37\x2d\xc3\x33\xea\xc7\xec\x19\x2f\x04\xb7\xbe\x28\xf4\xc2\xb9\x2c\xe5\x55\x0c\xa9\xd1\x2c\xaf\xe5\xc8\x66\x66\x24\x7d\x1c\x93\x7c\xbd\x4f\x2d\x82\x97\xa2\x6f\xf7\x23\x12\x72\xdd\x47\xd7\xe8\x2f\x66\xed\xb7\xab\x07\x65\xf0\x8a\xf6\x87\x28\x75\x33\x21\x29\x74\x67\xef\x9c\xe1\x0a\xb6\x96\x3d\x0e\xd3\xf4\xef\xd3\xc0\xbd\x82\x8d\xcc\x28\x29\x92\x3b\x2d\xb5\xc9\x7d\x23\x0b\xdc\x37\xf0\x7b\xef\x6d\xff\x09\x54\x2f\xf3\x48\x41\x24\x18\xf2\xb8\x66\x61\x77\xac\x58\x77\x0f\xf7\xd3\x48\x37\x5f\xa2\xf1\xdb\x6f\xbe\x82\x62\x5e\xb6\xed\xdf\x65\x71\x65\x1c\x99\x6b\x41\x39\x8f\x82\x13\x8d\x6c\x3a\x5c\x5a\xf2\xee\xb4\x4b\xe7\xfc\x93\xb8\xe0\xaf\xbf\x57\xff\x04\x00\x00\xff\xff\xf3\xb1\x5e\x20\x1d\x09\x00\x00")

func clusterBytebuildersDev_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterBytebuildersDev_clustersYaml,
		"cluster.bytebuilders.dev_clusters.yaml",
	)
}

func clusterBytebuildersDev_clustersYaml() (*asset, error) {
	bytes, err := clusterBytebuildersDev_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.bytebuilders.dev_clusters.yaml", size: 2333, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.bytebuilders.dev_clusters.yaml": clusterBytebuildersDev_clustersYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.bytebuilders.dev_clusters.yaml": &bintree{clusterBytebuildersDev_clustersYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
